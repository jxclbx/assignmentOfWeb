{"meta":{"title":"jxclbx的小站","subtitle":"","description":"诶嘿","author":"Jxclbx","url":"http://jxclbx.github.io","root":"/"},"pages":[{"title":"","date":"2023-05-08T05:44:55.926Z","updated":"2023-04-28T05:47:48.000Z","comments":true,"path":"404.html","permalink":"http://jxclbx.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2023-05-08T05:44:55.943Z","updated":"2023-04-28T05:53:46.000Z","comments":true,"path":"categories/index.html","permalink":"http://jxclbx.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-05-08T05:44:55.935Z","updated":"2023-04-28T05:53:42.000Z","comments":true,"path":"about/index.html","permalink":"http://jxclbx.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"","date":"2023-05-08T05:54:14.156Z","updated":"2023-05-08T05:54:14.156Z","comments":true,"path":"curriculumVitae/index.html","permalink":"http://jxclbx.github.io/curriculumVitae/index.html","excerpt":"","text":"个人简历 刘宗桓(Liu Zonghuan) 电话：18698079059 邮箱：21111334@mail.nankai.edu.cn github.com/jxclbx 南开大学（天津） 我来自南开大学人工智能学院，是一名21级的学生。在我的本科期间，我积极参与各类学术竞赛，包括物联网大赛、互联网+等，取得了优异的成绩。我热衷于研究人工智能技术在音频方面的应用，还对电工电子技术有所了解，并始终保持着对新技术的敏锐洞察力和探索精神。 作为一名品学兼优的学生，我不仅在学术上表现出色，在课余时间也热衷于参与社会实践与志愿服务，致力于将所学知识应用于实际问题解决中。我坚信，在不断提高自己的综合素质的过程中，我将为未来的人工智能领域做出更大的贡献。希望通过与各位同学共同学习和交流，我们能一起不断进步，共同推动人工智能技术的发展。 本科期间工作经历 人工智能学院 人工智能特色班宣传担当 科技协会成员 南开大学 党宣新媒体负责人 学工宣干事 政工组成员 项目经历 与同学组成团队赴杭州阿里巴巴访问学习 2023-03 我们首先参观了阿里巴巴的总部，感受到了那里的浓厚的技术氛围和高度的专业性。我们深入了解了阿里巴巴的创新文化和业务模式，对阿里巴巴的企业文化和发展历程有了更深刻的认识。 此外，我们还参观了阿里巴巴的智慧城市实验室，了解了未来城市的建设与发展。我们深入了解了物联网技术、智慧物流等新兴领域的发展趋势，受益匪浅。 带队参与挑战者杯 2023-04 在挑战者杯中，我们团队展现了非凡的实力和协作能力，最终荣获了佳绩。我们经历了一次充满挑战和收获的旅程。 在比赛前，我们经过了充分的准备和讨论，确定了明确的目标和分工，确保了比赛的顺利进行。在比赛中，我们遇到了许多难题和挑战，但是我们的团队成员始终相互支持，密切协作，不断调整和优化策略，最终克服了各种困难，完成了任务。 独立完成工程项目：基于深度学习的面部识别系统 2023-01 独立完成基于深度学习的面部识别系统的工程项目，是我最为得意和充实的经历之一。在这个项目中，我需要独立完成面部识别系统的设计和开发，其中包括了数据采集、数据预处理、特征提取、模型设计和实现、系统部署等多个环节。在这个过程中，我深入学习了深度学习、人工智能和计算机视觉等领域的知识和技能，同时也不断地挑战和实践自己的能力。 在完成这个项目的过程中，我收获了很多宝贵的经验和感悟。首先，我认识到了独立完成工程项目的重要性和挑战性，需要具备坚韧不拔的毅力和勇气。 其他信息 兴趣爱好 我在业余时间有很多爱好，包括摄影、音乐、HIFI、骑行、美术、平面设计以及代码设计等。这些爱好不仅让我在忙碌的学习生活中找到了乐趣，还帮助我培养了全面的兴趣和技能。 在摄影方面，我喜欢捕捉生活中的美好瞬间，尝试不同的拍摄技巧和角度，探索摄影的无限可能。音乐和HIFI方面，我热衷于欣赏各种类型的音乐，追求高品质的音频体验，同时也尝试自己创作音乐作品。骑行是我喜欢的户外活动之一，它带给我自由和挑战的感觉。我喜欢骑着自行车穿越城市和自然风光，感受大自然的美好。在美术和平面设计方面，我热爱绘画，尤其擅长素描和水彩。此外，我也对平面设计有浓厚兴趣，喜欢运用设计理念和创意来解决实际问题。最后，在代码设计方面，我热爱编程和软件开发，喜欢挑战自己解决各种技术难题。通过编写代码，我能将自己的想法付诸实现，不断提升个人技能，为未来职业生涯打下坚实基础。 这些丰富多彩的爱好让我在生活和学习中保持了良好的心态，也使我不断成长为一个全面发展的个体。 教育背景 天津市第一中学 2018-09-01 高中习得了良好的学习习惯与素质技能 南开大学 2021-09-01 本科期间就读于人工智能学院，学习了许多AI相关的前沿科技，提升了团队协作等个人能力 荣誉奖励 互联网+ 2022-07 一种基于多光谱的显著性检测设备获得省级二等奖 华为杯全国物联网大赛 2022-08 基于ESP-32的无接触式外卖柜获得全国二等奖 NFS巡线小车比赛 2022-04 学校冠军 专项技能 高等数学、线性代数、概率论等数学知识，以及相关的数学建模方法 C++、Python、Java等编程语言 相关的编程框架和工具，如TensorFlow、PyTorch等 数据处理和分析的能力，如数据清洗、数据预处理、特征提取等 算法和模型设计的能力，如神经网络、决策树、支持向量机 您对我的建议（没有后端 您的名字： 邮箱： 您对我的建议："},{"title":"我的朋友们","date":"2023-05-08T05:44:56.031Z","updated":"2023-04-28T05:53:58.000Z","comments":true,"path":"friends/index.html","permalink":"http://jxclbx.github.io/friends/index.html","excerpt":"友情链接没有友链是万万不行滴！ 虽然博客是我自己写的，但是感谢他们对我一路的资瓷~","text":"友情链接没有友链是万万不行滴！ 虽然博客是我自己写的，但是感谢他们对我一路的资瓷~"},{"title":"","date":"2023-05-08T05:44:55.997Z","updated":"2023-05-04T15:21:06.000Z","comments":true,"path":"curriculumVitae/css/style.css","permalink":"http://jxclbx.github.io/curriculumVitae/css/style.css","excerpt":"","text":"* { margin: 0; padding: 0; } body { width: 100%; display: flex; justify-content: center; } .main { position: relative; width: 60%; display: flex; flex-direction: column; align-items: center; margin: 20px; background: #fff; border-radius: 20px; box-shadow: rgba(0, 0, 0, 0.15) 0 0 15px; padding: 40px; z-index: 1; } .background-image { position: fixed; bottom: 0; left: 0; width: 100%; height: 100%; background-image: url(../images/bg.jpg); background-repeat: no-repeat; background-position: center bottom; background-size: cover; z-index: 0; } .background-image::after { content: ''; position: absolute; bottom: 0; left: 0; width: 100%; height: 50%; background-image: linear-gradient(to top, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0)); pointer-events: none; } .nav { width: 100%; display: flex; justify-content: space-between; height: 150px; align-items: center; } .name { width: 68%; height: 100%; display: flex; justify-content: start; align-items: center; font-size: 32px; font-weight: 700; color: #00bc5b; margin-right: 2%; } .introduction { width: 28%; display: flex; align-items: flex-start; justify-content: space-evenly; flex-direction: column; height: 100%; text-indent: 10px; margin-left: 2%; } .introduction a { text-decoration: none; color: #565656; font-size: 15px; } .hr { width: 100%; height: 1.5px; background: #eeeeee; margin: 20px 0; } .hr2 { width: 1.5px; height: 85%; background: #eeeeee; } .personal-information { width: 100%; display: flex; justify-content: space-between; align-items: center; padding: 20px 0; } .personal-information-image { width: 15%; margin-right: 3%; margin-left: 3%; } .personal-information-image img { width: 100%; border-radius: 10%; /*box-shadow: rgba(0, 0, 0, 0.3) 0 0 5px;*/ } .personal-information-content { width: calc(100% - 11% - 2%); line-height: 1.55; font-size: 14px; color: #565656; letter-spacing: 1.3px; text-indent: 2em; } .box { width: 100%; display: flex; justify-content: space-between; } .box-left { width: 68%; display: flex; flex-direction: column; margin-right: 2%; } .box-right { width: 28%; margin-left: 2%; display: flex; flex-direction: column; } .box-left-item, .box-right-item { width: 100%; display: flex; flex-direction: column; align-items: flex-start; margin-top: 15px; } .box-title { border-left: 5.5px #00bc5b solid; text-indent: 12px; font-size: 18px; font-weight: 600; } .box-subtitle { width: 100%; display: flex; justify-content: space-between; align-items: center; } .box-left-item>div { padding: 5px 0; margin: 8px 0; } .box-subtitle-text { font-size: 16px; font-weight: 600; color: #343434; } .box-subtitle-date { font-size: 14px; color: #565656; } .box-content { font-size: 14px; line-height: 1.55; letter-spacing: 1.33px; text-indent: 2em; } .box-content-noindent { font-size: 14px; line-height: 1.55; letter-spacing: 1.33px; } .hr3 { width: 1.5px; height: 100%; background: #eeeeee; } .box-right-item>div { padding: 2px 0; margin: 3px 0; } .box-content-list { margin-left: 40px; } input[type=\"text\"], input[type=\"email\"], textarea { width: 100%; padding: 10px; margin-top: 5px; margin-bottom: 15px; border: 2px solid #cccccc; border-radius: 5px; font-size: 14px; } input[type=\"submit\"] { background-color: #008CBA; color: #ffffff; font-size: 16px; border: none; border-radius: 5px; padding: 10px 20px; cursor: pointer; } input[type=\"submit\"]:hover { background-color: #0077B3; } .none-resize { resize: none; }"}],"posts":[{"title":"算法设计实验题目","slug":"算法设计实验题目","date":"2023-05-06T08:37:01.000Z","updated":"2023-05-06T09:01:42.000Z","comments":true,"path":"2023/05/06/算法设计实验题目/","link":"","permalink":"http://jxclbx.github.io/2023/05/06/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E9%A2%98%E7%9B%AE/","excerpt":"","text":"GS算法匹配小狗狗 BFS树的层序遍历 贪心算法（3月29日） 4.5没上课","categories":[{"name":"算法设计课程","slug":"算法设计课程","permalink":"http://jxclbx.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%AF%BE%E7%A8%8B/"}],"tags":[{"name":"专业课","slug":"专业课","permalink":"http://jxclbx.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"算法","slug":"算法","permalink":"http://jxclbx.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Anaconda配置PyTorch环境","slug":"Anaconda配置PyTorch环境","date":"2023-05-05T14:36:39.000Z","updated":"2023-05-06T05:41:32.000Z","comments":true,"path":"2023/05/05/Anaconda配置PyTorch环境/","link":"","permalink":"http://jxclbx.github.io/2023/05/05/Anaconda%E9%85%8D%E7%BD%AEPyTorch%E7%8E%AF%E5%A2%83/","excerpt":"","text":"在Anaconda下安装Pytorch安装pytorch，有两种办法，一是pip，二是conda。不管什么样的方法，首先，都要安装最新的anaconda。 安装AnacondaAnaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。里面所包含的Jupyter Notebook是数据挖掘领域中最热门的工具。(例如Kaggle网站) 没安装Anaconda的小伙伴可以参考以下安装链接： https://blog.csdn.net/qq_4521807/article/details/112442577 安装Pytorch打开Anaconda Prompt在命令行格式下，输入代码，完成调用清华镜像、建立pytorch环境、安装pytorch、测试pytorch过程 调用清华镜像1conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ 1conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ 1conda config --set show_channel_urls yes 1conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ 这个配置好以后，以后再安装其他的软件如果要用到清华镜像源网站就不用了重新配置了。 注意！如果切换镜像后当出现下载不了的情况，就先切换默认源，然后再修改另一个可以使用的conda源（一定要先恢复默认，再换另一个！！！） 切回默认源：1conda config --remove-key channels 创建Pytorch环境说真的，别在命令行里费那劲了，给你个GUI为嘛不用呢 1conda create -n pytorch python=3.7 查看环境是否安装成功 1conda info --envs 下载Pytorch根据自己的安装版本，在Pytorch官网寻找安装命令代码：Pytorch官网：https://pytorch.org/","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"anaconda","slug":"anaconda","permalink":"http://jxclbx.github.io/tags/anaconda/"},{"name":"python","slug":"python","permalink":"http://jxclbx.github.io/tags/python/"}]},{"title":"耳机评测系列（一）--并不是东洋650，而是东洋1840","slug":"并不是东洋650，而是东洋1840——","date":"2023-05-04T14:59:49.000Z","updated":"2023-05-04T15:22:56.000Z","comments":true,"path":"2023/05/04/并不是东洋650，而是东洋1840——/","link":"","permalink":"http://jxclbx.github.io/2023/05/04/%E5%B9%B6%E4%B8%8D%E6%98%AF%E4%B8%9C%E6%B4%8B650%EF%BC%8C%E8%80%8C%E6%98%AF%E4%B8%9C%E6%B4%8B1840%E2%80%94%E2%80%94/","excerpt":"","text":"敬请期待","categories":[{"name":"评测","slug":"评测","permalink":"http://jxclbx.github.io/categories/%E8%AF%84%E6%B5%8B/"}],"tags":[{"name":"铁三角， Audio Technica","slug":"铁三角，-Audio-Technica","permalink":"http://jxclbx.github.io/tags/%E9%93%81%E4%B8%89%E8%A7%92%EF%BC%8C-Audio-Technica/"},{"name":"耳机","slug":"耳机","permalink":"http://jxclbx.github.io/tags/%E8%80%B3%E6%9C%BA/"},{"name":"评测","slug":"评测","permalink":"http://jxclbx.github.io/tags/%E8%AF%84%E6%B5%8B/"}]},{"title":"Anaconda常用操作","slug":"Anaconda常用配置","date":"2023-05-04T09:30:21.000Z","updated":"2023-05-05T15:47:22.000Z","comments":true,"path":"2023/05/04/Anaconda常用配置/","link":"","permalink":"http://jxclbx.github.io/2023/05/04/Anaconda%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/","excerpt":"","text":"在使用 python anaconda时，经常会用到很多常用操作，记录下来，方便以后更好地使用： CondaConda既是一个包管理器又是一个环境管理器。你肯定知道包管理器，它可以帮你发现和查看包。但是如果当我们想要安装一个包，但是这个包只支持跟我们目前使用的python不同的版本时。你只需要几行命令，就可以搭建起一个可以运行另外python版本的环境。这就是conda环境管理器的强大功能。 Conda常用命令1conda update conda # 升级conda 12conda create -n pytorch1 python=3 Astroid Babel#创建基于python3 ，包含Astroid 和 Babel 包，称为pytorch1的新环境，在/envs/bunnies文件夹里 123# 查看当前可用环境conda env list conda info --envs 123# 切换工作环境conda activate baseconda deactivate 123456# 复制一个环境conda create -n flowers --clone snowflakes # 重新命名：先 clone 一份 new name 的环境；删除 old name 的环境；conda create -n tf --clone rcnn # 克隆conda remove -n rcnn --all # 删除conda info -e # 重新查看环境 123# 删除一个环境conda remove -n flowers --allconda info -e # 查看是否环境已经成功被移除 12345678# 管理Python环境# 检查python版本conda search --full --name python conda search python # 使用模糊匹配 # 安装一个新的版本 conda create -n snakes python=3# 查看已经安装的环境 conda info -e 123456789101112# 管理包# 查看当前环境中包含的包和其版本列表 conda list # 查找一个包conda search beautifulsoup4 # 安装一个包conda install --name bunnies beautifulsoup4 # 你必须告诉conda你要安装环境的名字（-n bunies）否则它将会被安装到当前环境中 # 使用 pip 安装一个包，并可使用 conda list 进行查看；pip install see conda list 123# 删除整个anaconda rm -rf ~/miniconda OR rm -rf ~/anaconda # 直接删除整个文件夹，并去除.bashrc 中的配置文件即可，对环境影响较少；","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"anaconda","slug":"anaconda","permalink":"http://jxclbx.github.io/tags/anaconda/"},{"name":"python","slug":"python","permalink":"http://jxclbx.github.io/tags/python/"}]},{"title":"站内搜索","slug":"站内搜索","date":"2023-05-03T05:46:39.000Z","updated":"2023-05-03T05:53:12.000Z","comments":true,"path":"2023/05/03/站内搜索/","link":"","permalink":"http://jxclbx.github.io/2023/05/03/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/","excerpt":"","text":"站内搜索配置代码 1234567891011121314# To use hexo search, you need to install the following plugins:# npm i hexo-generator-json-contentsearch: enable: true service: hexo # hexo, algolia, meilisearch algolia: searchAsYouType: true # If false, triggers the search only on submit. hitsPerPage: 5 # Set the number of hits per page. placeholder: &#x27;Search...&#x27; # The placeholder text of the input. meilisearch: placeholder: &#x27;Search...&#x27; searchKey: &#x27;&#x27; indexName: &#x27;&#x27; hostUrl: &#x27;&#x27; 显然这段没啥用，因为我们不需要使用algolia搜索等等 你需要安装 hexo-generator-json-content，并根据它的文档去做相应配置。 修改 主题配置文件 。 123search: enable: true service: hexo","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"站内搜索","slug":"站内搜索","permalink":"http://jxclbx.github.io/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://jxclbx.github.io/tags/hexo/"}]},{"title":"Github+jsDelivr搭建个人图床","slug":"Github-jsDelivr搭建个人图床","date":"2023-05-02T16:13:51.000Z","updated":"2023-05-03T04:01:06.000Z","comments":true,"path":"2023/05/03/Github-jsDelivr搭建个人图床/","link":"","permalink":"http://jxclbx.github.io/2023/05/03/Github-jsDelivr%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/","excerpt":"","text":"Github+jsDelivr图床经常写博文的朋友对床图肯定不陌生。使用markdown撰写博客，将图片放在床图网站生成外链统一管理，这样一份博文就可以发布在不同的平台，也避免了不同网页对同一张图片引用的。不过免费的床图网站有时不稳定，付费价格又都不便宜。 最近了解到了Github+jsDelivr的方式搭建个人床图，稳定快速免费。 搭建方法也比较简单，本文默认已经： 有Github账号 通过SSH与本地Git绑定 掌握基本的Git操作 那么，搭建床图仅需三步。 在GIthub建立一个仓库在创建GitHub仓库并与本地Git绑定中已经完成 将本地图片push到仓库 先将建好的仓库clone到本地 将需要上传的图片添加到对应文件夹 git push 图片就是保存在github仓库，每个仓库有1个G的容量限制。1个G？不叫事，那能存很多图片。如果你图片存满，那再建个新仓库就是了。 Github的资源在国内加载速度比较慢，所以需要用到CDN技术来加速。 CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。 jsDelivr(https://cdn.jsdelivr.net)就是一种免费且快速的CDN，通过jsDelivr引用资源GIthub图片资源，即可实现图片加速。所以接下来的第三步，改写一下链接就搞定了。主题内部也是用了这种方法。 通过jsDelivr引用资源使用方法： 1https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径 此处 1https://cdn.jsdelivr.net/gh/jxclbx/blogImages/文件路径 例如访问https://cdn.jsdelivr.net/gh/jxclbx/blogImages/imageSource/bg.jpg 得到如下效果： 图床接入 markdown的图片URL可以填入网络地址，并且paste image插件所输出的格式就是标准的markdown格式，而不是hexo的引用图片格式，我们只需在写完一篇blog后，多加入一步上传图片到github的步骤即可。 在merge后，直接将md文件中的url做替换，加入 1https://cdn.jsdelivr.net/gh/jxclbx/blogImages/imagePost/ 即可完成。","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"图床","slug":"图床","permalink":"http://jxclbx.github.io/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"http://jxclbx.github.io/tags/jsDelivr/"},{"name":"git","slug":"git","permalink":"http://jxclbx.github.io/tags/git/"}]},{"title":"创建GitHub仓库并与本地Git绑定","slug":"创建GitHub仓库并与本地Git绑定","date":"2023-05-02T13:40:34.000Z","updated":"2023-05-03T03:54:06.000Z","comments":true,"path":"2023/05/02/创建GitHub仓库并与本地Git绑定/","link":"","permalink":"http://jxclbx.github.io/2023/05/02/%E5%88%9B%E5%BB%BAGitHub%E4%BB%93%E5%BA%93%E5%B9%B6%E4%B8%8E%E6%9C%AC%E5%9C%B0Git%E7%BB%91%E5%AE%9A/","excerpt":"","text":"为了创建一个图床 有Github账号 通过SSH与本地Git绑定 掌握基本的Git操作 这三步是缺一不可的，现在先来将SSH绑定git 创建一个新的仓库我们点击“New repository”创建一个新的仓库： 得到SSH地址 绑定SSH双击git-bash.exe，在本地创建ssh key： 1ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; 然后成功后会在User文件夹对应的用户下创建.ssh文件夹，其中有一个id_rsa.pub文件，我们复制其中的key: 之后返回github，进入 Account Settings（账户配置），左边选择SSH and GPG Keys选项 其中的title随便填，下面的粘贴在你电脑上生成的key。点击添加之后，则添加成功： 验证是否绑定本地成功，在git-bash中验证，输入指令： 1ssh -T git@github.com 如果第一次执行该指令，则会提示是否continue继续，如果我们输入yes就会看到成功信息： 1ssh -T git@github.com github不支持shell这个可以忽略。 1Hi jxclbx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. Git操作由于GitHub每次执行commit操作时，都会记录username和email，所以要设置它们： 12git config --global user.name &quot;jxclbx&quot;git config --global user.email &quot;13001392777@163.com&quot; Clone到本地1git clone git@github.com:jxclbx/blogImages.git 此时在目录下会到一个隐藏的.git文件夹，该文件夹是Git用来跟踪管理版本库的，然后将所有文件添加到仓库，并提交文件： 1git add . 1git commit -m &quot; &quot; Add &amp; Commitgit commit 是 Git 版本控制系统中用于保存本地仓库更改的命令。当你在本地 Git 仓库中更改文件时，可以使用 git commit 创建一个新的快照并将其添加到 Git 历史记录中。这有助于跟踪你随着时间推移所做的更改并与其他人共同开发同一项目。 要使用 git commit，你首先需要使用 git add 将要提交的更改加入到暂存区中。这告诉 Git 你想要包含在提交中的更改内容。一旦你将更改加入到暂存区中，就可以使用以下命令将其提交： -m 标志用于添加提交信息，描述你所做的更改。编写清晰和描述性的提交信息非常重要，这样其他开发人员可以轻松地理解你所做的更改。 如果你想在提交中包含工作目录中的所有更改，可以使用以下命令： 1git commit -a -m &quot;提交信息&quot; -a 标志告诉 Git 自动将仓库中所有已修改或已删除的更改加入到暂存区中。 提交完成后，可以将其推送到远程仓库以与他人共享更改或保留更改的备份。 暂存区暂存区是 Git 版本控制系统中的一个概念，它是介于工作目录和 Git 仓库之间的一个中间状态，也被称为 Git 的“索引”（index）。它是用于临时存储已修改或已删除文件的地方，以便在下一次提交时包含这些更改。 暂存区在本地 Git 仓库的 .git 目录中的 index 文件中。每次使用 git add 命令将文件添加到暂存区时，Git 会将这些更改写入 index 文件中。在执行 git commit 命令之前，你可以使用 git status 命令来查看哪些文件已经被添加到暂存区，哪些文件还未被添加。 需要注意的是，暂存区只是一个中间状态，只有执行 git commit 命令将暂存区中的更改提交到 Git 仓库后，这些更改才会被永久保存下来。如果你在暂存区中添加了一个文件，但之后又对该文件进行了修改，那么只有重新使用 git add 命令将该文件添加到暂存区，之后再使用 git commit 命令才能将最新的更改提交到 Git 仓库中。 关于远程仓库：remote在 Git 中，remote 表示远程仓库的别名或名称。当你从远程仓库中获取代码或将代码推送到远程仓库时，需要使用远程仓库的名称。为了方便起见，Git 允许为每个远程仓库分配一个别名，这个别名就是 remote。 在 git remote add 命令中，remote 参数指定了新远程仓库的名称或别名，origin 就是一个常用的远程仓库别名。在这个命令中，origin 将被用作指向远程仓库的别名，而 git@github.com:jxclbx/blogImages.git 则是该远程仓库的 URL。这个命令将把远程仓库 git@github.com:jxclbx/blogImages.git 添加到本地 Git 仓库中，并将其命名为 origin。 在添加远程仓库后，你可以使用 git remote -v 命令查看所有已添加的远程仓库，包括它们的别名和 URL。 这个错误意味着在尝试将本地 Git 仓库连接到远程仓库时，Git 发现已经存在一个名为 origin 的远程仓库。这通常发生在你尝试在已经存在 origin 的情况下再次运行 git remote add origin 命令，或者在克隆仓库时指定了一个与 origin 名称相同的远程仓库。 要解决这个错误，可以尝试以下方法： 1git remote rm origin 本地仓库建立完成此时我们的本地仓库就建立好了。 然后我们的本地仓库要关联GitHub的仓库，直接将本地仓库关联远程GitHub仓库地址即可 1git remote add origin git@github.com:jxclbx/blogImages.git 上传本地代码至GitHub下面要上传本地代码至GitHub，但是前提是远程仓库不能使空的，所以我们在远程仓库中创建一个README.md的文件： 本地仓库也创建一个一模一样的README.md文件即可，然后使用git pull origin master远程更新一下。 然后我们在原来的git bash中提交本地仓库中的web工程源代码： 1git push -u origin master error: src refspec master does not match any确认本地 Git 仓库中是否存在名为 master 的分支。使用以下命令查看本地分支： 1git branch 如果 master 分支不存在，则可以使用以下命令创建该分支： 1git checkout -b master Pull request 出现 There isn’t anything to compare.请移步另一篇文章。至此，已经绑定以及创建仓库。","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"git","slug":"git","permalink":"http://jxclbx.github.io/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"http://jxclbx.github.io/tags/ssh/"}]},{"title":"你好，五月！","slug":"你好，五月！","date":"2023-04-28T06:11:48.000Z","updated":"2023-05-03T03:34:52.000Z","comments":true,"path":"2023/04/28/你好，五月！/","link":"","permalink":"http://jxclbx.github.io/2023/04/28/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%BA%94%E6%9C%88%EF%BC%81/","excerpt":"","text":"五月一个寻常的五月，往往以一个寻常的错误开篇。 寻常的不能再寻常 寻常到……front-matter的Headimg千万不要忘了打后缀名，本地路径打上了后缀名也会因为外部链接没法引用这个路径下的image而无法显示。。最后投奔了图床…… 开始真正的五月在北京开启，爬展花花卡丁车 好在五月是这样的一个轻松充实的基调 （富士真好玩.jpg 让我们和四月说一声再见吧，希望五月的风带来我想见的你，愿你想要的明天，都会如约而至。","categories":[{"name":"浮生","slug":"浮生","permalink":"http://jxclbx.github.io/categories/%E6%B5%AE%E7%94%9F/"}],"tags":[{"name":"五月","slug":"五月","permalink":"http://jxclbx.github.io/tags/%E4%BA%94%E6%9C%88/"}]},{"title":"VS_Code配置Python解释器","slug":"VS-Code配置Python解释器","date":"2023-04-26T13:21:53.000Z","updated":"2023-05-03T03:37:40.000Z","comments":true,"path":"2023/04/26/VS-Code配置Python解释器/","link":"","permalink":"http://jxclbx.github.io/2023/04/26/VS-Code%E9%85%8D%E7%BD%AEPython%E8%A7%A3%E9%87%8A%E5%99%A8/","excerpt":"","text":"我们熟悉的老朋友VS Code今天cv2莫名其妙报错，经过一番排查，得到是Python自身出了问题，故记录一下VSC与anaconda配置其的过程 VSCode首先，我们需要在环境变量中添加 12C:\\Users\\13001\\AppData\\Local\\Programs\\Python\\Python37C:\\Users\\13001\\AppData\\Local\\Programs\\Python\\Python37\\Scripts 再在VSCode中，Ctrl+Shift+P 或者 View &gt; Command Palette，打开命令面板输入 Python: Select Interpreter 选择Python的安装路径 可以使用上方的刷新符号来更新已经卸载的python版本的状态使其消失 选择好解释器后，就可以愉快的开始使用了","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"垃圾py","slug":"垃圾py","permalink":"http://jxclbx.github.io/tags/%E5%9E%83%E5%9C%BEpy/"}]},{"title":"公开前：配置主题","slug":"公开前：配置主题","date":"2023-04-23T15:35:32.000Z","updated":"2023-05-03T03:35:48.000Z","comments":true,"path":"2023/04/23/公开前：配置主题/","link":"","permalink":"http://jxclbx.github.io/2023/04/23/%E5%85%AC%E5%BC%80%E5%89%8D%EF%BC%9A%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/","excerpt":"","text":"首先，非常激动，非常开心，我打开了撰写blog的大门。 配置主题首先是更改主题 1npm i hexo-theme-volantis 这步是为了将主题安置到 blog\\node_modules\\hexo-theme-volantis 关于背景图片的替换将图片放置在 node_modules\\hexo-theme-volantis\\source\\images 中，再将 12345678cover: height_scheme: full # full, half layout_scheme: dock # blank (留白), search (搜索), dock (坞), featured (精选), focus (焦点) display: home: true archive: true others: false # can be written in front-matter &#x27;cover: true&#x27; background: /images/bg.jpg # background image 的background字段更改为相对路径即可 关于引用图片hexo-renderer-marked 3.1.0 引入了一个新的选项，其允许你无需使用 asset_img 标签插件就可以在 markdown 中嵌入图片 然后再在 _config.yml中更改代码块 1234post_asset_folder: truemarked: prependRoot: true postAsset: true 后在 _posts 文件夹中新建与post名相同的文件夹即可","categories":[{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"自言自语","slug":"自言自语","permalink":"http://jxclbx.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-04-22T15:54:53.000Z","updated":"2023-05-02T15:55:08.000Z","comments":true,"path":"2023/04/22/hello-world/","link":"","permalink":"http://jxclbx.github.io/2023/04/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"算法设计课程","slug":"算法设计课程","permalink":"http://jxclbx.github.io/categories/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E8%AF%BE%E7%A8%8B/"},{"name":"技术","slug":"技术","permalink":"http://jxclbx.github.io/categories/%E6%8A%80%E6%9C%AF/"},{"name":"评测","slug":"评测","permalink":"http://jxclbx.github.io/categories/%E8%AF%84%E6%B5%8B/"},{"name":"浮生","slug":"浮生","permalink":"http://jxclbx.github.io/categories/%E6%B5%AE%E7%94%9F/"}],"tags":[{"name":"专业课","slug":"专业课","permalink":"http://jxclbx.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"},{"name":"算法","slug":"算法","permalink":"http://jxclbx.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"anaconda","slug":"anaconda","permalink":"http://jxclbx.github.io/tags/anaconda/"},{"name":"python","slug":"python","permalink":"http://jxclbx.github.io/tags/python/"},{"name":"铁三角， Audio Technica","slug":"铁三角，-Audio-Technica","permalink":"http://jxclbx.github.io/tags/%E9%93%81%E4%B8%89%E8%A7%92%EF%BC%8C-Audio-Technica/"},{"name":"耳机","slug":"耳机","permalink":"http://jxclbx.github.io/tags/%E8%80%B3%E6%9C%BA/"},{"name":"评测","slug":"评测","permalink":"http://jxclbx.github.io/tags/%E8%AF%84%E6%B5%8B/"},{"name":"站内搜索","slug":"站内搜索","permalink":"http://jxclbx.github.io/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"},{"name":"hexo","slug":"hexo","permalink":"http://jxclbx.github.io/tags/hexo/"},{"name":"图床","slug":"图床","permalink":"http://jxclbx.github.io/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"jsDelivr","slug":"jsDelivr","permalink":"http://jxclbx.github.io/tags/jsDelivr/"},{"name":"git","slug":"git","permalink":"http://jxclbx.github.io/tags/git/"},{"name":"ssh","slug":"ssh","permalink":"http://jxclbx.github.io/tags/ssh/"},{"name":"五月","slug":"五月","permalink":"http://jxclbx.github.io/tags/%E4%BA%94%E6%9C%88/"},{"name":"垃圾py","slug":"垃圾py","permalink":"http://jxclbx.github.io/tags/%E5%9E%83%E5%9C%BEpy/"},{"name":"自言自语","slug":"自言自语","permalink":"http://jxclbx.github.io/tags/%E8%87%AA%E8%A8%80%E8%87%AA%E8%AF%AD/"}]}